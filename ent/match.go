// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/bug/ent/match"
	"entgo.io/bug/ent/team"
	"entgo.io/ent/dialect/sql"
)

// Match is the model entity for the Match schema.
type Match struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MatchQuery when eager-loading is set.
	Edges           MatchEdges `json:"edges"`
	match_home_team *int
	match_away_team *int
}

// MatchEdges holds the relations/edges for other nodes in the graph.
type MatchEdges struct {
	// HomeTeam holds the value of the home_team edge.
	HomeTeam *Team `json:"home_team,omitempty"`
	// AwayTeam holds the value of the away_team edge.
	AwayTeam *Team `json:"away_team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// HomeTeamOrErr returns the HomeTeam value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchEdges) HomeTeamOrErr() (*Team, error) {
	if e.loadedTypes[0] {
		if e.HomeTeam == nil {
			// The edge home_team was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.HomeTeam, nil
	}
	return nil, &NotLoadedError{edge: "home_team"}
}

// AwayTeamOrErr returns the AwayTeam value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchEdges) AwayTeamOrErr() (*Team, error) {
	if e.loadedTypes[1] {
		if e.AwayTeam == nil {
			// The edge away_team was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.AwayTeam, nil
	}
	return nil, &NotLoadedError{edge: "away_team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Match) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case match.FieldID:
			values[i] = new(sql.NullInt64)
		case match.FieldStartDate:
			values[i] = new(sql.NullTime)
		case match.ForeignKeys[0]: // match_home_team
			values[i] = new(sql.NullInt64)
		case match.ForeignKeys[1]: // match_away_team
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Match", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Match fields.
func (m *Match) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case match.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case match.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				m.StartDate = value.Time
			}
		case match.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field match_home_team", value)
			} else if value.Valid {
				m.match_home_team = new(int)
				*m.match_home_team = int(value.Int64)
			}
		case match.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field match_away_team", value)
			} else if value.Valid {
				m.match_away_team = new(int)
				*m.match_away_team = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryHomeTeam queries the "home_team" edge of the Match entity.
func (m *Match) QueryHomeTeam() *TeamQuery {
	return (&MatchClient{config: m.config}).QueryHomeTeam(m)
}

// QueryAwayTeam queries the "away_team" edge of the Match entity.
func (m *Match) QueryAwayTeam() *TeamQuery {
	return (&MatchClient{config: m.config}).QueryAwayTeam(m)
}

// Update returns a builder for updating this Match.
// Note that you need to call Match.Unwrap() before calling this method if this Match
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Match) Update() *MatchUpdateOne {
	return (&MatchClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Match entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Match) Unwrap() *Match {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Match is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Match) String() string {
	var builder strings.Builder
	builder.WriteString("Match(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", start_date=")
	builder.WriteString(m.StartDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Matches is a parsable slice of Match.
type Matches []*Match

func (m Matches) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
